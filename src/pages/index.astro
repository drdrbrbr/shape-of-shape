---
import Page from "@/layouts/Page.astro";
//microCMS呼び出し
import { getArticles } from "../library/microcms";
const response = await getArticles({
  fields: ["id", "title", "thumb"],
  limit: 100,
});
---

<Page title="TOP" pageClass="index">
  <div class="kv">
    <div id="p5-canvas"></div>
    <h1>
      <div>
        <span>S</span><span>H</span><span>A</span><span>P</span><span>E</span>
      </div>
      <div><span>O</span><span>F</span></div>
      <div>
        <span>S</span><span>H</span><span>A</span><span>P</span><span>E</span>
      </div>
    </h1>
    <p class="jp_title">
      <span>か</span><span>た</span><span>ち</span>
      <span> </span><span>の</span>
      <span>か</span><span>た</span><span>ち</span>
    </p>
  </div>

  <div class="wrap">
    <ul>
      {
        response.contents.map(
          (content: any) => (
            console.log(content),
            (
              <li>
                <a href={`/${content.id}`}>
                  <span class="index">{`(${content.id})`}</span>
                  <span
                    class="title"
                    set:html={content.title.replace(/\n/g, "<br>")}
                  />
                  {content.thumb && (
                    <img
                      class="thumb"
                      src={content.thumb.url}
                      alt={content.title}
                    />
                  )}
                </a>
              </li>
            )
          )
        )
      }
    </ul>
  </div>
</Page>

<style lang="scss">
  .kv {
    height: 100dvh;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;

    #p5-canvas {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1;
      @include mq(sp) {
        scale: 0.5;
        transform: translate(-100%, -105%);
      }

      canvas {
        width: 600px !important;
        height: 600px !important;
        display: block !important;
        max-width: none !important;
        max-height: none !important;
      }
    }

    h1 {
      font-weight: 200;
      font-style: italic;
      font-size: 16vh;
      width: 90%;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;
      height: 90dvh;
      position: relative;
      z-index: 2;
      div {
        display: flex;
        justify-content: space-between;
        width: 100%;
      }

      span {
        display: block;
        line-height: 100%;
        transition: transform 0.2s var(--ease-quint-out);
      }
      @include mq(sp) {
        font-size: 10vh;
        font-weight: 200;
        height: 95dvh;
      }
    }
    .jp_title {
      font-size: get_pc_vw(12);
      font-weight: 500;
      line-height: 100%;
      letter-spacing: 0.28em;
      position: absolute;
      top: 50%;
      right: 25%;
      transform: translateY(-50%);
      @include mq(sp) {
        text-align: center;
        font-size: get_sp_vw(24);
        top: 65%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 100%;
      }
      span {
        display: inline-block;
        line-height: 100%;
        transition: transform 0.2s var(--ease-quint-out);
      }
    }
  }
  .wrap {
    padding: 0 get_pc_vw(8);
    @include mq(sp) {
      padding: 0 8px;
    }
    ul {
      margin-top: 40px;
      display: flex;
      flex-wrap: wrap;
      gap: get_pc_vw(66);
      @include mq(sp) {
        gap: 0vw;
        justify-content: space-between;
      }
      li {
        font-size: get_pc_vw(16);
        position: relative;
        @include mq(sp) {
          font-size: get_sp_vw(32);
        }
        a {
          width: get_pc_vw(170);
          height: get_pc_vw(170);
          display: block;
          padding: get_pc_vw(8) 0 0 get_pc_vw(8);
          @include mq(sp) {
            width: 43vw;
            height: 43vw;
          }
          &:hover {
            background-color: var(--key-color);
            color: #fff;
            rotate: 180deg;
            transition: rotate 0.2s var(--ease-quint-out);
          }
          .index {
            font-weight: 600;
            line-height: 100%;
            letter-spacing: 0.02em;
            font-size: get_pc_vw(12);
            @include mq(sp) {
              font-size: get_sp_vw(24);
            }
          }
          .title {
            display: block;
            margin-top: get_pc_vw(10);
          }
          .thumb {
            max-width: 80%;
            height: auto;
            margin-top: get_pc_vw(10);
            position: absolute;
            bottom: 0;
            right: 0;
          }
        }
      }
    }
  }
</style>

<script>
  // p5.jsでランダムな形を描画
  import { ShapeMorphing } from "../scripts/modules/ShapeMorphing";

  // インターバルIDをモジュールスコープに保持
  let rotationInterval: number | undefined;
  let yInterval: number | undefined;

  function initKvAnimation() {
    const en_spans = document.querySelectorAll(".kv h1 span");
    const jp_spans = document.querySelectorAll(".kv .jp_title span");
    const rotations = [0, 90, 180, 270];

    function setRandomRotations() {
      en_spans.forEach((span) => {
        const randomRotation =
          rotations[Math.floor(Math.random() * rotations.length)];
        (span as HTMLElement).style.transform = `rotate(${randomRotation}deg)`;
      });
    }

    function setRandomY() {
      jp_spans.forEach((span) => {
        const randomY = Math.floor(Math.random() * 100);
        (span as HTMLElement).style.transform = `translateY(${randomY}px)`;
      });
    }

    setRandomRotations();
    setRandomY();

    // 既存インターバルをクリアしてから再設定
    if (rotationInterval) clearInterval(rotationInterval);
    if (yInterval) clearInterval(yInterval);

    rotationInterval = window.setInterval(setRandomRotations, 2040);
    yInterval = window.setInterval(setRandomY, 2030);

    new ShapeMorphing();
  }

  document.addEventListener("astro:page-load", initKvAnimation);
</script>

---
import Page from "@/layouts/Page.astro";
import { getArticles, getArticleDetail } from "../library/microcms";

// 詳細記事ページの全パスを取得
export async function getStaticPaths() {
  const response = await getArticles({ fields: ["id"] });
  return response.contents.map((content: any) => ({
    params: {
      articleId: content.id,
      katachi: content.katachi,
    },
  }));
}

//記事の詳細情報を取得
const { articleId } = Astro.params;
const article = await getArticleDetail(articleId as string);
---

<Page title="My first article with Astro">
  <a href="/" class="logo">
    <div class="en_title">
      <div>
        <span>S</span><span>H</span><span>A</span><span>P</span><span>E</span>
      </div>
      <div><span>O</span><span>F</span></div>
      <div>
        <span>S</span><span>H</span><span>A</span><span>P</span><span>E</span>
      </div>
    </div>
    <div class="jp_title">かたち の かたち</div>
  </a>
  <main>
    <span class="num">({articleId})</span>
    <h1 class="title" set:html={article.title.replace(/\n/g, "<br>")} />
    <!-- <p class="publishedAt">公開日時：{article.publishedAt}</p> -->
    <div class="post" set:html={article.content} />
  </main>
  <div class="katachi" set:html={article.katachi} />
</Page>

<style lang="scss" is:global>
  .katachi {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    opacity: 0.1;
    @include grid-center;
    z-index: 0;
    svg {
      width: auto;
      height: 80vh;
    }
  }
  .logo {
    position: fixed;
    top: 64px;
    right: 64px;
    width: 454px;

    display: flex;
    align-items: center;
    justify-content: center;
    rotate: -90deg;
    transform-origin: right top;
    translate: -246px 0;
    z-index: 2;

    @include mq(sp) {
      padding: 48px 0 0 48px;
      scale: 0.6;
      translate: 0px 0;
      rotate: 0deg;
      transform-origin: left top;
      position: static;
    }

    &:hover {
      .en_title span {
        transform: rotate(0deg) !important;
      }
    }

    .en_title {
      font-weight: 300;
      font-style: italic;
      font-size: 40px;
      width: 100%;
      height: 246px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;
      div {
        display: flex;
        justify-content: space-between;
        width: 100%;
      }

      span {
        display: block;
        line-height: 100%;
        transition: transform 0.2s var(--ease-quint-out);
      }
      @include mq(sp) {
        font-weight: 300;
      }
    }
    .jp_title {
      font-size: 17px;
      font-weight: 500;
      line-height: 100%;
      letter-spacing: 0.28em;
      position: absolute;
      @include mq(sp) {
        font-size: 22px;
      }
    }
  }
  main {
    padding: 64px;
    @include mq(sp) {
      padding: 40px 24px 0 24px;
    }
    .num {
      font-size: 12px;
      font-weight: 600;
      line-height: 100%;
      letter-spacing: 0.02em;
    }
    .title {
      font-size: 40px;
      font-weight: 500;
      letter-spacing: 0.2em;
      line-height: 1.4em;
      margin-top: 20px;
    }
    .post {
      margin-top: 56px;
      line-height: 2em;
      width: 780px;
      @include mq(sp) {
        width: 100%;
      }
      h1,
      h2 {
        font-size: 32px;
        font-weight: 500;
        margin: 64px 0 40px;
      }
      h3 {
        font-size: 24px;
        margin: 64px 0 40px;
      }
      p {
        margin: 40px 0;
        font-size: 16px;
      }
      blockquote {
        background-color: #cad6ebbc;
        font-size: 16px;
        padding: 12px 16px;
        p {
          margin: 0;
        }
      }
      .iframely-embed {
        font-size: 12px;
        .wt {
          font-size: 12px;
        }
      }

      // iframe全般に対するスタイル
      iframe {
        width: 100%;
        max-width: 100%;
        height: auto;
        aspect-ratio: 16 / 9; // 一般的な動画の比率
        border: none;
        border-radius: 8px;
        margin: 24px 0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }
    }
  }
</style>

<script>
  // iframelyのShadow DOM内のスタイルをカスタマイズ
  document.addEventListener("DOMContentLoaded", function () {
    // 既存のspan回転アニメーション
    const spans = document.querySelectorAll(".logo .en_title span");
    setInterval(() => {
      spans.forEach((span) => {
        const rotations = [0, 90, 180, 270, 360];
        const randomRotation =
          rotations[Math.floor(Math.random() * rotations.length)];
        (span as HTMLElement).style.transform = `rotate(${randomRotation}deg)`;
      });
    }, 1000);

    // iframelyの埋め込みを監視して、ロード後にスタイルを調整
    const observeIframely = () => {
      const iframelyEmbeds = document.querySelectorAll(".iframely-embed");

      iframelyEmbeds.forEach((embed) => {
        // 方法1: attachShadow後の要素を探す
        const divWithShadow = embed.querySelector("div:first-child");

        // 方法2: 全ての子要素をチェック
        embed.querySelectorAll("div").forEach((div) => {
          if (div.shadowRoot) {
            console.log("Shadow root found:", div);
            applyCustomStyles(div.shadowRoot);
          }
        });

        // 方法3: iframely APIが完全に読み込まれた後に再チェック
        if (window.iframely) {
          window.iframely.on("rendered", function (widget) {
            console.log("iframely rendered:", widget);
            const shadowDiv =
              widget.querySelector && widget.querySelector("div");
            if (shadowDiv && shadowDiv.shadowRoot) {
              applyCustomStyles(shadowDiv.shadowRoot);
            }
          });
        }
      });
    };

    // スタイルを適用する関数
    const applyCustomStyles = (shadowRoot) => {
      // 既存のカスタムスタイルがない場合のみ追加
      if (!shadowRoot.querySelector("style[data-custom]")) {
        const styleEl = document.createElement("style");
        styleEl.setAttribute("data-custom", "true");
        styleEl.textContent = `
            /* 背景色を透明に */
            .w, .wf, .wt, ._sc, ._sm {
              background: transparent !important;
              border-color: transparent !important;
            }
            
            /* テキストサイズを小さく */
            .t, .th, .td, .tf {
              font-size: 12px !important;
              color: var(--key-color) !important;
            }
            .th {
              font-size: 13px !important;
            }
            .tf, .tw, .tc {
              font-size: 11px !important;
            }
            
            /* パディングを調整 */
            .wt {
              padding: 4px 0 !important;
            }
            ._sc .wf {
              padding: 6px !important;
            }
            
            /* 全体のボーダーを調整 */
            .body {
              box-shadow: unset !important;
              border: 0px solid #e0e0e0 !important;
              border-radius: 0px !important;
              color: var(--key-color) !important;
            }
          `;
        shadowRoot.appendChild(styleEl);
        console.log("Custom styles applied to shadow root");
      }
    };

    // 初回実行（複数回試行）
    setTimeout(observeIframely, 100);
    setTimeout(observeIframely, 500);
    setTimeout(observeIframely, 1000);
    setTimeout(observeIframely, 2000);

    // 動的に追加される埋め込みにも対応
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === 1) {
            // Element node
            // iframely-embedクラスを持つ要素、またはその子要素を確認
            if (node.classList && node.classList.contains("iframely-embed")) {
              setTimeout(() => observeIframely(), 100);
            } else if (
              node.querySelector &&
              node.querySelector(".iframely-embed")
            ) {
              setTimeout(() => observeIframely(), 100);
            }
          }
        });
      });
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });

    // iframelyのグローバルイベントも監視
    if (window.iframely) {
      window.iframely.on("ready", function () {
        console.log("iframely ready");
        setTimeout(observeIframely, 100);
      });
    }

    // iframelyスクリプトの読み込み完了を待つ
    const checkIframely = setInterval(() => {
      if (window.iframely && window.iframely.on) {
        clearInterval(checkIframely);
        window.iframely.on("ready", () => {
          console.log("iframely ready (interval check)");
          observeIframely();
        });
      }
    }, 100);
  });
</script>

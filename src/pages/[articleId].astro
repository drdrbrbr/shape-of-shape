---
import Page from "@/layouts/Page.astro";
import { getArticles, getArticleDetail } from "../library/microcms";

// 次の記事取得用

// 詳細記事ページの全パスを取得
export async function getStaticPaths() {
  const response = await getArticles({ fields: ["id"], limit: 100 });
  console.log(
    "Available article IDs:",
    response.contents.map((c: any) => c.id),
    response.contents.map((c: any) => c.thumb)
  );
  return response.contents.map((content: any) => ({
    params: {
      articleId: content.id,
      katachi: content.katachi,
      thumb: content.thumb,
    },
  }));
}

// 記事の詳細情報を取得
const { articleId } = Astro.params;
const article = await getArticleDetail(articleId as string);

// 全記事を公開日時順に取得して次の記事を特定
const articlesList = await getArticles({
  fields: ["id", "title"],
  orders: "publishedAt",
  limit: 100,
});
const index = articlesList.contents.findIndex((a) => a.id === articleId);
const nextArticle =
  index >= 0 && index < articlesList.contents.length - 1
    ? articlesList.contents[index + 1]
    : null;
const prevArticle = index > 0 ? articlesList.contents[index - 1] : null;
---

<Page title={article.title} image={article.thumb?.url}>
  <a href="/" class="logo">
    <div class="en_title">
      <div>
        <span>S</span><span>H</span><span>A</span><span>P</span><span>E</span>
      </div>
      <div><span>O</span><span>F</span></div>
      <div>
        <span>S</span><span>H</span><span>A</span><span>P</span><span>E</span>
      </div>
    </div>
    <div class="jp_title">かたち の かたち</div>
  </a>
  <div class="main">
    <span class="num">({articleId})</span>
    <h1 class="title" set:html={article.title.replace(/\n/g, "<br>")} />
    <!-- <p class="publishedAt">公開日時：{article.publishedAt}</p> -->
    {
      article.thumb && (
        <img class="thumb" src={article.thumb.url} alt={article.title} />
      )
    }
    <div class="post" set:html={article.content} />

    {
      (prevArticle || nextArticle) && (
        <nav class="article-nav">
          {nextArticle && (
            <a class="next" href={`/${nextArticle.id}`}>
              <span class="direction">← 次</span>{" "}
              <span>{nextArticle.title}</span>
            </a>
          )}
          {prevArticle && (
            <a class="prev" href={`/${prevArticle.id}`}>
              <span>{prevArticle.title}</span>{" "}
              <span class="direction">前 →</span>
            </a>
          )}
        </nav>
      )
    }
  </div>
  <div class="katachi" set:html={article.katachi} />
</Page>

<style lang="scss" is:global>
  .katachi {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    opacity: 0.1;
    @include grid-center;
    z-index: 0;
    svg {
      width: auto;
      height: 80vh;
      path {
        fill: var(--key-color);
      }
    }
  }
  .logo {
    position: fixed;
    top: 64px;
    right: 64px;
    width: 454px;

    display: flex;
    align-items: center;
    justify-content: center;
    rotate: -90deg;
    transform-origin: right top;
    translate: -246px 0;
    z-index: 2;

    @include mq(sp) {
      padding: 48px 0 0 48px;
      scale: 0.6;
      translate: 0px 0;
      rotate: 0deg;
      transform-origin: left top;
      position: static;
    }

    &:hover {
      .en_title span {
        transform: rotate(0deg) !important;
      }
    }

    .en_title {
      font-weight: 300;
      font-style: italic;
      font-size: 40px;
      width: 100%;
      height: 246px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;
      div {
        display: flex;
        justify-content: space-between;
        width: 100%;
      }

      span {
        display: block;
        line-height: 100%;
        transition: transform 0.2s var(--ease-quint-out);
      }
      @include mq(sp) {
        font-weight: 300;
      }
    }
    .jp_title {
      font-size: 17px;
      font-weight: 500;
      line-height: 100%;
      letter-spacing: 0.28em;
      position: absolute;
      @include mq(sp) {
        font-size: 22px;
      }
    }
  }
  main {
    padding: 64px;
    @include mq(sp) {
      padding: 40px 16px 0 16px;
    }
    .num {
      font-size: 12px;
      font-weight: 600;
      line-height: 100%;
      letter-spacing: 0.02em;
    }
    .title {
      font-size: 40px;
      font-weight: 500;
      letter-spacing: 0.2em;
      line-height: 1.4em;
      margin-top: 20px;
    }
    .thumb {
      max-width: 780px;
      height: auto;
      margin: 40px 0 0;
      @include mq(sp) {
        width: 100%;
        margin: 20px 0 0;
      }
    }
    .post {
      margin-top: 56px;
      line-height: 2em;
      width: 780px;
      @include mq(sp) {
        width: 100%;
      }
      h1,
      h2 {
        font-size: 32px;
        font-weight: 500;
        margin: 64px 0 40px;
        @include mq(sp) {
          margin: 40px 0 20px;
        }
      }
      h3 {
        font-size: 24px;
        margin: 64px 0 40px;
        @include mq(sp) {
          margin: 40px 0 20px;
        }
      }
      p {
        margin: 40px 0;
        font-size: 16px;
        @include mq(sp) {
          margin: 32px 0;
        }
      }
      blockquote {
        background-color: #cad6ebbc;
        font-size: 16px;
        padding: 12px 16px;
        p {
          margin: 0;
        }
      }
      .iframely-embed {
        font-size: 12px;
        .wt {
          font-size: 12px;
        }
      }
      img {
        max-width: 100%;
        height: auto;
        margin: 40px 0;
      }
    }
    .article-nav {
      margin-top: 80px;
      font-size: 20px;
      font-weight: 500;
      letter-spacing: 0.05em;
      display: flex;
      justify-content: space-between;
      gap: 24px;
      @include mq(sp) {
        margin-top: 40px;
        flex-direction: column;
        gap: 16px;
        font-size: 16px;
      }
      a {
        display: flex;
        gap: 16px;
        padding: 8px;
        border-radius: 4px;
        line-height: 140%;
        @include mq(sp) {
          justify-content: space-between;
        }
        &:hover {
          background-color: var(--key-color);
          color: #fff;
          transition: background-color 0.2s var(--ease-quint-out);
        }
        span {
          display: inline-block;
          @include mq(sp) {
            &.direction {
              width: 50px;
            }
          }
        }
      }
    }
  }
</style>

<script>
  function initArticleScript() {
    // 既存のspan回転アニメーション
    const spans = document.querySelectorAll(".logo .en_title span");
    setInterval(() => {
      spans.forEach((span) => {
        const rotations = [0, 90, 180, 270, 360];
        const randomRotation =
          rotations[Math.floor(Math.random() * rotations.length)];
        (span as HTMLElement).style.transform = `rotate(${randomRotation}deg)`;
      });
    }, 1000);

    // iframeの読み込み完了を待つ
    const iframes = document.querySelectorAll("iframe");
    if (iframes.length > 0) {
      iframes.forEach((iframe) => {
        iframe.addEventListener("load", () => {
          document.querySelectorAll(".iframely-embed div").forEach((div) => {
            const root =
              div.shadowRoot ||
              div.querySelector("iframe")?.contentWindow?.document;
            console.log(root);
            if (root) {
              const body = root.querySelector(".body") as HTMLElement;
              const wt = root.querySelector(".wt") as HTMLElement;
              const bg = root.querySelector("._sm") as HTMLElement;
              const bdr = root.querySelector("._sm") as HTMLElement;
              const a = root.querySelector(".wt a") as HTMLElement;
              const t = root.querySelector(".wt .t") as HTMLElement;
              if (bg) {
                body.style.setProperty("box-shadow", "0 0 0 0", "important");
                wt.style.setProperty("padding", "0px", "important");
                bdr.style.setProperty("border", "none", "important");
                bg.style.setProperty("background", "#fff", "important");
                a.style.setProperty("color", "var(--key-color)", "important");
                t.style.setProperty("color", "var(--key-color)", "important");
              }
            }
          });
        });
      });
    } else {
      // iframeがない場合は即座に実行
      setTimeout(() => {
        document.querySelectorAll(".iframely-embed div").forEach((div) => {
          const root = div.shadowRoot || div.querySelector("iframe");
          console.log(root);
          if (root) {
            const body = root.querySelector(".body") as HTMLElement;
            const wt = root.querySelector(".wt") as HTMLElement;
            const bg = root.querySelector("._sm") as HTMLElement;
            const bdr = root.querySelector("._sm") as HTMLElement;
            const a = root.querySelector(".wt a") as HTMLElement;
            const t = root.querySelector(".wt .t") as HTMLElement;
            if (bg) {
              body.style.setProperty("box-shadow", "0 0 0 0", "important");
              wt.style.setProperty("padding", "10px", "important");
              bdr.style.setProperty("border", "none", "important");
              bg.style.setProperty("background", "#fff", "important");
              a.style.setProperty("color", "var(--key-color)", "important");
              t.style.setProperty("color", "var(--key-color)", "important");
            }
          }
        });
      }, 1000);
    }
  }

  document.addEventListener("DOMContentLoaded", initArticleScript);
  document.addEventListener("astro:after-swap", initArticleScript);
</script>

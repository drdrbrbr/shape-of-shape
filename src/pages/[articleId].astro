---
import Page from "@/layouts/Page.astro";
import { getArticles, getArticleDetail } from "../library/microcms";

// 詳細記事ページの全パスを取得
export async function getStaticPaths() {
  const response = await getArticles({ fields: ["id"] });
  return response.contents.map((content: any) => ({
    params: {
      articleId: content.id,
      katachi: content.katachi,
    },
  }));
}

//記事の詳細情報を取得
const { articleId } = Astro.params;
const article = await getArticleDetail(articleId as string);
---

<Page title="My first article with Astro">
  <a href="/" class="logo">
    <div class="en_title">
      <div>
        <span>S</span><span>H</span><span>A</span><span>P</span><span>E</span>
      </div>
      <div><span>O</span><span>F</span></div>
      <div>
        <span>S</span><span>H</span><span>A</span><span>P</span><span>E</span>
      </div>
    </div>
    <div class="jp_title">かたち の かたち</div>
  </a>
  <main>
    <span class="num">({articleId})</span>
    <h1 class="title" set:html={article.title.replace(/\n/g, "<br>")} />
    <!-- <p class="publishedAt">公開日時：{article.publishedAt}</p> -->
    <div class="post" set:html={article.content} />
  </main>
  <div class="katachi" set:html={article.katachi} />
</Page>

<style lang="scss" is:global>
  .katachi {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    opacity: 0.1;
    @include grid-center;
    z-index: 0;
    svg {
      width: auto;
      height: 80vh;
    }
  }
  .logo {
    position: fixed;
    top: 64px;
    right: 64px;
    width: 454px;

    display: flex;
    align-items: center;
    justify-content: center;
    rotate: -90deg;
    transform-origin: right top;
    translate: -246px 0;
    z-index: 2;

    @include mq(sp) {
      padding: 48px 0 0 48px;
      scale: 0.6;
      translate: 0px 0;
      rotate: 0deg;
      transform-origin: left top;
      position: static;
    }

    &:hover {
      .en_title span {
        transform: rotate(0deg) !important;
      }
    }

    .en_title {
      font-weight: 300;
      font-style: italic;
      font-size: 40px;
      width: 100%;
      height: 246px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;
      div {
        display: flex;
        justify-content: space-between;
        width: 100%;
      }

      span {
        display: block;
        line-height: 100%;
        transition: transform 0.2s var(--ease-quint-out);
      }
      @include mq(sp) {
        font-weight: 300;
      }
    }
    .jp_title {
      font-size: 17px;
      font-weight: 500;
      line-height: 100%;
      letter-spacing: 0.28em;
      position: absolute;
      @include mq(sp) {
        font-size: 22px;
      }
    }
  }
  main {
    padding: 64px;
    @include mq(sp) {
      padding: 40px 24px 0 24px;
    }
    .num {
      font-size: 12px;
      font-weight: 600;
      line-height: 100%;
      letter-spacing: 0.02em;
    }
    .title {
      font-size: 40px;
      font-weight: 500;
      letter-spacing: 0.2em;
      line-height: 1.4em;
      margin-top: 20px;
    }
    .post {
      margin-top: 56px;
      line-height: 2em;
      width: 780px;
      @include mq(sp) {
        width: 100%;
      }
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const spans = document.querySelectorAll(".logo .en_title span");

    setInterval(() => {
      spans.forEach((span) => {
        const rotations = [0, 90, 180, 270, 360];
        const randomRotation =
          rotations[Math.floor(Math.random() * rotations.length)];
        (span as HTMLElement).style.transform = `rotate(${randomRotation}deg)`;
      });
    }, 1000);
  });
</script>

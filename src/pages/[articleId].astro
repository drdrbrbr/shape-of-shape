---
import Page from "@/layouts/Page.astro";
import { getArticles, getArticleDetail } from "../library/microcms";

// 詳細記事ページの全パスを取得
export async function getStaticPaths() {
  const response = await getArticles({ fields: ["id"], limit: 100 });
  console.log(
    "Available article IDs:",
    response.contents.map((c: any) => c.id)
  );
  return response.contents.map((content: any) => ({
    params: {
      articleId: content.id,
      katachi: content.katachi,
    },
  }));
}

//記事の詳細情報を取得
const { articleId } = Astro.params;
const article = await getArticleDetail(articleId as string);
---

<Page title="My first article with Astro">
  <a href="/" class="logo">
    <div class="en_title">
      <div>
        <span>S</span><span>H</span><span>A</span><span>P</span><span>E</span>
      </div>
      <div><span>O</span><span>F</span></div>
      <div>
        <span>S</span><span>H</span><span>A</span><span>P</span><span>E</span>
      </div>
    </div>
    <div class="jp_title">かたち の かたち</div>
  </a>
  <main>
    <span class="num">({articleId})</span>
    <h1 class="title" set:html={article.title.replace(/\n/g, "<br>")} />
    <!-- <p class="publishedAt">公開日時：{article.publishedAt}</p> -->
    <div class="post" set:html={article.content} />
  </main>
  <div class="katachi" set:html={article.katachi} />
</Page>

<style lang="scss" is:global>
  .katachi {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    opacity: 0.1;
    @include grid-center;
    z-index: 0;
    svg {
      width: auto;
      height: 80vh;
    }
  }
  .logo {
    position: fixed;
    top: 64px;
    right: 64px;
    width: 454px;

    display: flex;
    align-items: center;
    justify-content: center;
    rotate: -90deg;
    transform-origin: right top;
    translate: -246px 0;
    z-index: 2;

    @include mq(sp) {
      padding: 48px 0 0 48px;
      scale: 0.6;
      translate: 0px 0;
      rotate: 0deg;
      transform-origin: left top;
      position: static;
    }

    &:hover {
      .en_title span {
        transform: rotate(0deg) !important;
      }
    }

    .en_title {
      font-weight: 300;
      font-style: italic;
      font-size: 40px;
      width: 100%;
      height: 246px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;
      div {
        display: flex;
        justify-content: space-between;
        width: 100%;
      }

      span {
        display: block;
        line-height: 100%;
        transition: transform 0.2s var(--ease-quint-out);
      }
      @include mq(sp) {
        font-weight: 300;
      }
    }
    .jp_title {
      font-size: 17px;
      font-weight: 500;
      line-height: 100%;
      letter-spacing: 0.28em;
      position: absolute;
      @include mq(sp) {
        font-size: 22px;
      }
    }
  }
  main {
    padding: 64px;
    @include mq(sp) {
      padding: 40px 24px 0 24px;
    }
    .num {
      font-size: 12px;
      font-weight: 600;
      line-height: 100%;
      letter-spacing: 0.02em;
    }
    .title {
      font-size: 40px;
      font-weight: 500;
      letter-spacing: 0.2em;
      line-height: 1.4em;
      margin-top: 20px;
    }
    .post {
      margin-top: 56px;
      line-height: 2em;
      width: 780px;
      @include mq(sp) {
        width: 100%;
      }
      h1,
      h2 {
        font-size: 32px;
        font-weight: 500;
        margin: 64px 0 40px;
      }
      h3 {
        font-size: 24px;
        margin: 64px 0 40px;
      }
      p {
        margin: 40px 0;
        font-size: 16px;
      }
      blockquote {
        background-color: #cad6ebbc;
        font-size: 16px;
        padding: 12px 16px;
        p {
          margin: 0;
        }
      }
      .iframely-embed {
        font-size: 12px;
        .wt {
          font-size: 12px;
        }
      }
      img {
        max-width: 100%;
        height: auto;
        margin: 40px 0;
      }
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // 既存のspan回転アニメーション
    const spans = document.querySelectorAll(".logo .en_title span");
    setInterval(() => {
      spans.forEach((span) => {
        const rotations = [0, 90, 180, 270, 360];
        const randomRotation =
          rotations[Math.floor(Math.random() * rotations.length)];
        (span as HTMLElement).style.transform = `rotate(${randomRotation}deg)`;
      });
    }, 1000);

    // iframeの読み込み完了を待つ
    const iframes = document.querySelectorAll("iframe");
    if (iframes.length > 0) {
      iframes.forEach((iframe) => {
        iframe.addEventListener("load", () => {
          document.querySelectorAll(".iframely-embed div").forEach((div) => {
            // Shadow Rootが存在するかチェック
            console.log(div.shadowRoot);
            if (div.shadowRoot) {
              const wtElement = div.shadowRoot.querySelector(".wt");
              const t = div.shadowRoot.querySelector(".t");
              if (wtElement) {
                (wtElement as HTMLElement).style.setProperty(
                  "color",
                  "var(--key-color)",
                  "important"
                );
              }
              if (t) {
                (t as HTMLElement).style.setProperty(
                  "color",
                  "var(--key-color)",
                  "important"
                );
              }
            }
          });
        });
      });
    } else {
      console.log("end");
      // iframeがない場合は即座に実行
      setTimeout(() => {
        document.querySelectorAll(".iframely-embed div").forEach((div) => {
          console.log(div.shadowRoot);
          if (div.shadowRoot) {
            const body = div.shadowRoot.querySelector(".body") as HTMLElement;
            const bg = div.shadowRoot.querySelector("._sm") as HTMLElement;
            const bdr = div.shadowRoot.querySelector("._sm") as HTMLElement;
            const a = div.shadowRoot.querySelector(".wt a") as HTMLElement;
            const t = div.shadowRoot.querySelector(".wt .t") as HTMLElement;
            if (bg) {
              body.style.setProperty(
                "box-shadow",
                "0px 0px 0px 0px",
                "important"
              );
              body.style.setProperty("padding", "transparent", "important");
              bdr.style.setProperty("border", "none", "important");
              bg.style.setProperty("background", "transparent", "important");
              a.style.setProperty("color", "var(--key-color)", "important");
              t.style.setProperty("color", "var(--key-color)", "important");
            }
          }
        });
      }, 1000);
    }
  });
</script>
